5.8.1

15. What will be the final value in EAX after these instructions execute?
The final value in EAX will be 5


16. Which statement is true about what will happen when the example code runs?
d. The program will halt with a runtime error on Line 11


17. Which statement is true about what will happen when the example code runs?
c. EAX will equal 30 on line 6 


18. Which statement is true about what will happen when the example code runs?
a. EAX will equal 30 on line 7


19. Which statement is true about what will happen when the example code runs?
a. EDX will equal 40 on line 6 


20. What values will be written to the array when the following code executes?
the elements of the array will be decimal 10, 20, 30, 40 respectively




5.9 Programming Exercise

1. Draw Text Colors

INCLUDE Irvine32.inc		; For printing the final result

.386
.model flat,stdcall
.stack 4096
ExitProcess proto,dwExitCode:dword

.data
COUNT = 4
prompt BYTE "This is a test string",0

.code
main PROC

	mov ecx, COUNT
	mov edx, OFFSET prompt
L1:
	mov eax, ecx		; For simplicity, the ECX value is [1,4] which we have valid color representation
	add eax, black * 16
	call SetTextColor
	call WriteString
	loop L1
	
	invoke 	ExitProcess,0
main ENDP
end main





2. Linking Array Items

INCLUDE Irvine32.inc			; For printing the final result

.386
.model flat,stdcall
.stack 4096
ExitProcess proto,dwExitCode:dword

.data
START = 1
CHARS BYTE 'HACEBDFG',0
LINKS DWORD 0, 4, 5, 6, 2, 3, 7, 0
COUNT = LENGTHOF CHARS
OUTPUT BYTE COUNT DUP(0)		; The output array

.code
main PROC
	
	mov ecx, LENGTHOF LINKS		; We loop the array
	mov esi, START			; esi is the index value of the char array
	mov edx, 0			; be the index of the output array
L1:
	mov al, CHARS[esi]
	mov OUTPUT[edx], al
	inc edx
	mov esi, LINKS[esi * TYPE LINKS]
	loop L1

	invoke 	ExitProcess,0
main ENDP
end main





4. Simple Addition (2)
; I tested in my Visual Studio 2022, works as expected

INCLUDE Irvine32.inc		; For printing the final result

.386
.model flat,stdcall
.stack 4096
ExitProcess proto,dwExitCode:dword

.data
middler BYTE 0					; store the middle value of the row count
middlec BYTE 0					; store the middle value of the column count
prompt BYTE "Enter a 32-bit signed integer: ",0

.code
main PROC
	mov eax, 0
	call middleRowCol			; now we have middle values in the memory
	
	mov ecx, 3
L1:
	call inputsAndAdd			; prompt for two integers and added them, stored in EAX
	call Clrscr
	call moveToMiddle
	call WriteInt				; output the result in eax
	call Crlf
	call WaitMsg				; wait
	loop L1

	invoke 	ExitProcess,0
main ENDP

; Move the cursor to the middle of the screen
; middler and middlec must have valid values
moveToMiddle PROC
	push edx

	mov dh, middler
	mov dl, middlec
	call Gotoxy

	pop edx
	ret
moveToMiddle ENDP


; Ask users for two integers, and return the sum of them in EAX
inputsAndAdd PROC
	push ebx
	push ecx
	push edx

	mov ecx, 2
	mov ebx, 0					; have the sum of the integers
	mov edx, OFFSET prompt
L1:
	call Clrscr					; clear screen
	call moveToMiddle			; move cursor to the middle
	call WriteString			; prompt user for integer
	call ReadInt				; input integer into EAX
	add ebx, eax
	loop L1

	mov eax, ebx

	pop edx
	pop ecx
	pop ebx
	ret
inputsAndAdd ENDP


; Calculate the middle of the window, i.e. rows/2 and cols/2
; The middle row will be stored in middler, the middle column will be stored in middlec
middleRowCol PROC
	push eax
	push ebx
	push edx

	mov eax, 0
	mov edx, 0
	call GetMaxXY

	mov bl, 2

	movzx eax, al			; interesting
	div bl					; I checked chapter 7, DIV could be used to find the middle value
	mov middler, al
	movzx eax, dl
	div bl
	mov middlec, al

	pop edx
	pop ebx
	pop eax
	ret
middleRowCol ENDP

end main







5. BetterRandomRange Procedure
; I tested in my Visual Studio 2022, works as expected

INCLUDE Irvine32.inc		; For printing the final result

.386
.model flat,stdcall
.stack 4096
ExitProcess proto,dwExitCode:dword


.code
main PROC
	mov ebx, -300 ; lower bound
	mov eax, 100 ; upper bound

	mov ecx, 50
L1:
	push eax
	call BetterRandomRange
	call WriteInt
	call Crlf					; new line
	pop eax
	loop L1

	invoke 	ExitProcess,0
main ENDP

; generates an integer between M and N-1 (inclusive, M<=N-1)
; M in EBX and N in EAX, the generated integer will be returned in EAX
BetterRandomRange PROC
	
	sub eax, ebx
	call RandomRange
	add eax, ebx

	ret
BetterRandomRange ENDP


end main








7. Random Screen Locations

; I tested in my Visual Studio 2022, works as expected

INCLUDE Irvine32.inc		; For printing the final result

.386
.model flat,stdcall
.stack 4096
ExitProcess proto,dwExitCode:dword

.data
row BYTE 0
col BYTE 0
target	BYTE 'P'

.code
main PROC
	call rowCol					; now we have size of the window
	
	mov eax, 100				; delay 100 milliseconds
	mov ecx, 100
L1:
	call outputCharRandom		
	call Delay
	loop L1

	invoke 	ExitProcess,0
main ENDP



; output 'target' in random screen location
outputCharRandom PROC
	push eax
	push edx

	movzx eax, row
	call RandomRange
	mov dh, al				; now we have the random row
	movzx eax, col
	call RandomRange
	mov dl, al				; now we have the random col
	call Gotoxy

	mov al, target
	call WriteChar

	pop edx
	pop eax
	ret
outputCharRandom ENDP


; Calculate the size of thw window
; The row/col will be stored in memory
rowCol PROC
	push eax
	push edx

	mov eax, 0
	mov edx, 0
	call GetMaxXY

	mov row, al
	mov col, dl

	pop edx
	pop eax
	ret
rowCol ENDP

end main